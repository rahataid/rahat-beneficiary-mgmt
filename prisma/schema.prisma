// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BeneficiaryArchive {
  id           Int    @db.Integer()
  uuid         String @unique @default(uuid()) @db.Uuid()
  firstName    String
  lastName     String
  govtIDNumber String

  gender         Gender         @default(UNKNOWN)
  birthDate      DateTime?
  walletAddress  String?
  phone          String?
  email          String?
  archived       Boolean        @default(false)
  isVerified     Boolean        @default(false)
  location       String?
  latitude       Float?
  longitude      Float?
  notes          String?
  bankedStatus   BankedStatus   @default(UNKNOWN)
  internetStatus InternetStatus @default(UNKNOWN)
  phoneStatus    PhoneStatus    @default(UNKNOWN)
  extras         Json?          @db.JsonB()

  createdAt   DateTime
  updatedAt   DateTime?
  deletedAt   DateTime?
  archiveType ArchiveType @default(DELETED)
  createdBy   String?

  @@map("tbl_archive_beneficiaries")
}

model Beneficiary {
  id           Int     @id @default(autoincrement()) @db.Integer()
  uuid         String  @unique @default(uuid()) @db.Uuid()
  // customId  String @unique
  firstName    String
  lastName     String
  govtIDNumber String?

  gender        Gender    @default(UNKNOWN)
  birthDate     DateTime?
  walletAddress String?
  phone         String?
  email         String?
  archived      Boolean   @default(false)
  isVerified    Boolean @default(false)
  location      String?
  latitude      Float?
  longitude     Float?

  notes          String?
  bankedStatus   BankedStatus   @default(UNKNOWN)
  internetStatus InternetStatus @default(UNKNOWN)
  phoneStatus    PhoneStatus    @default(UNKNOWN)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt()
  extras         Json?          @db.JsonB()
  createdBy      String?
  user           User?          @relation(fields: [createdBy], references: [uuid])

  beneficiariesGroup BeneficiaryGroup[]
  beneficiarySource  BeneficiarySource[]
  TargetResult       TargetResult[]

  @@map("tbl_beneficiaries")
}

model Source {
  id           Int         @id @default(autoincrement()) @db.Integer()
  uuid         String      @unique @default(uuid()) @db.Uuid()
  name         String
  importId     String      @unique
  importField  ImportField @default(UUID)
  isImported   Boolean     @default(false)
  fieldMapping Json

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy String?
  user      User?     @relation(fields: [createdBy], references: [uuid])

  beneficiarySource BeneficiarySource[]

  @@map("tbl_sources")
}

enum ImportField {
  UUID
  GOVT_ID_NUMBER
}

model BeneficiarySource {
  id             Int         @id @default(autoincrement()) @db.Integer()
  uuid           String      @unique @default(uuid()) @db.Uuid()
  source         Source      @relation(fields: [sourceUID], references: [uuid])
  sourceUID      String      @db.Uuid()
  beneficiary    Beneficiary @relation(fields: [beneficiaryUID], references: [uuid])
  beneficiaryUID String      @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([beneficiaryUID, sourceUID], name: "benefSourceIdentifier")
  @@map("tbl_beneficiary_sources")
}

model FieldDefinition {
  id            Int       @id @default(autoincrement()) @db.Integer()
  uuid          String    @unique @default(uuid()) @db.Uuid()
  name          String    @unique
  fieldType     FieldType
  fieldPopulate Json? // { data: "john doe" } Or { data: [{id:1, label:'Green'}] }
  isActive      Boolean   @default(true)
  isTargeting   Boolean   @default(false)
  isSystem      Boolean   @default(false)
  variations    String[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt()
  createdBy     String?
  user          User?     @relation(fields: [createdBy], references: [uuid])

  @@map("tbl_field_definitions")
}

model Group {
  id                 Int                @id @default(autoincrement()) @db.Integer()
  uuid               String             @unique @default(uuid()) @db.Uuid()
  name               String             @unique
  beneficiariesGroup BeneficiaryGroup[]
  isSystem           Boolean            @default(false)
  autoCreated        Boolean            @default(false)
  origins            String[]   // Targeting/Import
  targetingCriteria  Json? // { data: TARGETING_DATA }

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy String?
  user      User?     @relation(fields: [createdBy], references: [uuid])

  BeneficiaryComm BeneficiaryComm[]

  @@map("tbl_groups")
}

model BeneficiaryComm {
  id           Int     @id @default(autoincrement()) @db.Integer()
  uuid         String  @unique @default(uuid()) @db.Uuid()
  name         String
  groupUID     String  @db.Uuid()
  message      String
  transportId  String
  sessionId    String?

  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt()

  createdBy    String?
  user         User?     @relation(fields: [createdBy], references: [uuid])
  group        Group     @relation(fields: [groupUID], references: [uuid])

  @@map("tbl_beneficiary_comms")
}
   
model BeneficiaryGroup {
  id             Int         @id @default(autoincrement()) @db.Integer()
  uuid           String      @unique @default(uuid()) @db.Uuid()
  beneficiary    Beneficiary @relation(fields: [beneficiaryUID], references: [uuid])
  beneficiaryUID String      @db.Uuid()
  group          Group       @relation(fields: [groupUID], references: [uuid])
  groupUID       String      @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([beneficiaryUID, groupUID], name: "benefGroupIdentifier")
  @@map("tbl_beneficiary_groups")
}

model Log {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid()) @db.Uuid()

  action String
  data   Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy String?
  user      User?     @relation(fields: [createdBy], references: [uuid])

  @@map("tbl_logs")
}

model TargetQuery {
  id            Int               @id @default(autoincrement()) @db.Integer()
  uuid          String            @unique @default(uuid()) @db.Uuid()
  label         String?
  filterOptions Json              @db.JsonB()
  status        TargetQueryStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt()
  createdBy     String?
  user          User?             @relation(fields: [createdBy], references: [uuid])
  TargetResult  TargetResult[]

  @@map("tbl_target_queries")
}

model TargetResult {
  id          Int         @id @default(autoincrement()) @db.Integer()
  uuid        String      @unique @default(uuid()) @db.Uuid()
  beneficiary Beneficiary @relation(fields: [benefUuid], references: [uuid])
  benefUuid   String      @db.Uuid()
  targetQuery TargetQuery @relation(fields: [targetUuid], references: [uuid])
  targetUuid  String      @db.Uuid()
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt()

  @@map("tbl_target_results")
}

enum TargetQueryStatus {
  PENDING
  COMPLETED
}

enum ArchiveType {
  DELETED
  UPDATED
}

enum BankedStatus {
  UNKNOWN
  UNBANKED
  BANKED
  UNDER_BANKED
}

enum InternetStatus {
  UNKNOWN
  NO_INTERNET
  HOME_INTERNET
  MOBILE_INTERNET
}

enum PhoneStatus {
  UNKNOWN
  NO_PHONE
  FEATURE_PHONE
  SMART_PHONE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum AuthType {
  EMAIL
  PHONE
  WALLET
}

enum FieldType {
  CHECKBOX
  DROPDOWN
  NUMBER
  PASSWORD
  RADIO
  TEXT
  TEXTAREA
  DATE
}

// ============User Management Schema============
model User {
  id     Int     @id @default(autoincrement())
  uuid   String  @unique @default(uuid())
  name   String?
  gender Gender  @default(UNKNOWN)
  email  String?
  phone  String?
  wallet String?
  extras Json?   @db.JsonB()

  Auth     Auth[]
  UserRole UserRole[]
  Signup   Signup[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt()
  deletedAt       DateTime?
  createdBy       Int?
  updatedBy       Int?
  Log             Log[]
  BeneficiaryComm BeneficiaryComm[]
  Beneficiary     Beneficiary[]
  Source          Source[]
  FieldDefinition FieldDefinition[]
  Group           Group[]
  TargetQuery     TargetQuery[]

  @@map("tbl_users")
}

model Role {
  id       Int       @unique @default(autoincrement())
  name     String    @unique @db.VarChar()
  isSystem Boolean   @default(false)
  expiry   DateTime?

  Permission Permission[]
  UserRole   UserRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy Int?
  updatedBy Int?

  @@map("tbl_auth_roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  roleId     Int
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_auth_permissions")
}

model UserRole {
  id     Int       @id @default(autoincrement())
  userId Int
  roleId Int
  expiry DateTime?

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  createdBy Int?

  @@unique([userId, roleId], name: "userRoleIdentifier")
  @@map("tbl_users_roles")
}

model Auth {
  id            Int       @id @default(autoincrement())
  userId        Int
  service       Service
  serviceId     String
  details       Json?     @db.JsonB()
  challenge     String?
  falseAttempts Int       @default(0)
  isLocked      Boolean   @default(false)
  lockedOnAt    DateTime?
  lastLoginAt   DateTime?

  User    User          @relation(fields: [userId], references: [id])
  AuthLog AuthSession[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([service, serviceId], name: "authIdentifier")
  @@map("tbl_auth")
}

model AuthSession {
  id        Int     @id @default(autoincrement())
  clientId  String
  sessionId String  @unique @default(uuid())
  authId    Int
  ip        String?
  details   Json?   @db.JsonB()
  userAgent String?

  Auth Auth @relation(fields: [authId], references: [id])

  createdAt DateTime @default(now())

  @@map("tbl_auth_sessions")
}

enum Service {
  EMAIL
  PHONE
  WALLET
  GOOGLE
  APPLE
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
}

// ============End User Management Schema===========
// ++++++++++++++++++ START: @rumsan/user - Signup +++++++++++++++++++++++++

model Signup {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  userIdentifier String?
  data           Json?        @db.JsonB()
  status         SignupStatus @default(PENDING)
  rejectedReason String?
  approvedBy     Int?
  approvedAt     DateTime?

  User User? @relation(fields: [approvedBy], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_users_signups")
}

enum SignupStatus {
  PENDING
  APPROVED
  FAILED
  REJECTED
}

// ++++++++++++++++++ END: @rumsan/user - Signup +++++++++++++++++++++++++++
// ============Settings Schema===========
model Setting {
  name           String          @id @unique
  value          Json
  dataType       SettingDataType
  requiredFields String[]
  isReadOnly     Boolean         @default(false)
  isPrivate      Boolean         @default(true)

  @@map("tbl_settings")
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
}

// ============End Settings Schema===========

// Stats Schema //
model Stats {
  name  String  @id @unique
  data  Json
  group String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stats")
}

//End Stats Schema //
