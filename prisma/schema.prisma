// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beneficiary {
  id       Int    @id @default(autoincrement()) @db.Integer()
  uuid     String @unique @default(uuid()) @db.Uuid()
  customId String @unique

  firstName      String
  lastName       String
  gender         Gender         @default(UNKNOWN)
  walletAddress  String?
  birthDate      DateTime?
  location       String?
  latitude       Float?
  longitude      Float?
  phone          String?
  email          String?
  extras         Json?          @db.JsonB()
  notes          String?
  bankedStatus   BankedStatus   @default(UNKNOWN)
  internetStatus InternetStatus @default(UNKNOWN)
  phoneStatus    PhoneStatus    @default(UNKNOWN)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt()

  beneficiariesGroup BeneficiaryGroup[]
  beneficiarySource  BeneficiarySource[]
  TargetResult       TargetResult[]

  @@map("tbl_beneficiaries")
}

model Source {
  id                Int                 @id @default(autoincrement()) @db.Integer()
  uuid              String              @unique @default(uuid()) @db.Uuid()
  name              String
  importId          String              @unique
  isImported        Boolean             @default(false)
  beneficiarySource BeneficiarySource[]
  details           Json?               @db.JsonB()
  fieldMapping      Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt()

  @@map("tbl_sources")
}

model BeneficiarySource {
  id            Int         @id @default(autoincrement()) @db.Integer()
  source        Source      @relation(fields: [sourceId], references: [id])
  sourceId      Int         @db.Integer()
  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId Int         @db.Integer()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_beneficiary_sources")
}

model FieldDefinition {
  id            Int       @id @default(autoincrement()) @db.Integer()
  name          String    @unique
  fieldType     FieldType
  fieldPopulate Json? // { data: "john doe" } Or { data: [{id:1, label:'Green'}] }
  isActive      Boolean   @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_field_definitions")
}

model Group {
  id                 Int                @id @default(autoincrement()) @db.Integer()
  name               String             @unique
  beneficiariesGroup BeneficiaryGroup[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_groups")
}

model BeneficiaryGroup {
  id            Int         @id @default(autoincrement()) @db.Integer()
  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId Int         @db.Integer()
  group         Group       @relation(fields: [groupId], references: [id])
  groupId       Int         @db.Integer()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([beneficiaryId, groupId])
  @@map("tbl_beneficiary_groups")
}

model TargetQuery {
  id            Int               @id @default(autoincrement()) @db.Integer()
  uuid          String            @unique @default(uuid()) @db.Uuid()
  label         String?
  filterOptions Json              @db.JsonB()
  status        TargetQueryStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt()
  TargetResult  TargetResult[]

  @@map("tbl_target_queries")
}

model TargetResult {
  id          Int         @id @default(autoincrement()) @db.Integer()
  beneficiary Beneficiary @relation(fields: [benefUuid], references: [uuid])
  benefUuid   String      @db.Uuid()
  targetQuery TargetQuery @relation(fields: [targetUuid], references: [uuid])
  targetUuid  String      @db.Uuid()
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt()

  @@map("tbl_target_results")
}

enum TargetQueryStatus {
  PENDING
  COMPLETED
}

enum BankedStatus {
  UNKNOWN
  UNBANKED
  BANKED
  UNDER_BANKED
}

enum InternetStatus {
  UNKNOWN
  NO_INTERNET
  HOME_INTERNET
  MOBILE_INTERNET
}

enum PhoneStatus {
  UNKNOWN
  NO_PHONE
  FEATURE_PHONE
  SMART_PHONE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum AuthType {
  EMAIL
  PHONE
  WALLET
}

enum FieldType {
  CHECKBOX
  DROPDOWN
  NUMBER
  PASSWORD
  RADIO
  TEXT
  TEXTAREA
}

// ============User Management Schema============

model Role {
  id        Int       @unique @default(autoincrement())
  name      String    @unique @db.VarChar()
  isSystem  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  Permission Permission[]
  User       User[]

  @@map("roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  role       Role    @relation(fields: [roleId], references: [id])
  roleId     Int     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("permissions")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authAddress String   @unique
  authType    AuthType @default(EMAIL)
  firstName   String
  lastName    String
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      Int      @db.Integer()
  otp         String?

  @@map("users")
}

// ============End User Management Schema===========

// ============Settings Schema===========

model Setting {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  value          Json
  requiredFields String[]
  isReadOnly     Boolean  @default(false) // true? Dont allow Write from API
  isPrivate      Boolean  @default(true) // true?  Dont allow Read from API

  @@map("settings")
}

// ============End Settings Schema===========
